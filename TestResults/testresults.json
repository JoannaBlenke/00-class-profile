{
  "stats": {
    "suites": 4,
    "tests": 10,
    "passes": 9,
    "pending": 0,
    "failures": 1,
    "start": "2019-01-18T20:34:36.999Z",
    "end": "2019-01-18T20:34:37.435Z",
    "duration": 436,
    "testsRegistered": 10,
    "passPercent": 90,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "fa50b2c7-34a7-44f1-87d5-e5c2a4bd6bff",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "ef0c28db-90da-4dc3-9d86-cff5140b5be8",
        "title": "Git Checks",
        "fullFile": "/Users/joannathecoder/00-class-profile/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Git Checks \"before all\" hook",
            "timedOut": false,
            "duration": 394,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(0);\ngitCommits(repoPath) \n  .on('data', function (commit) {\n    if (!matchesProfEmail(commit.author.email, ignoreCommitEmails))\n    {\n      studentCommits++;\n    }\n  })\n  .on('end', function () {\n  })\n;\ngitCheck  = gitState.checkSync('./', function(r,e) {\n  //return [r, e];\n});\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "3584bf46-00b6-4df8-9a40-daa0d6192dc8",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "You should have made at least 2 git commits ",
            "fullTitle": "Git Checks You should have made at least 2 git commits ",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(studentCommits).to.be.at.least(minCommits);",
            "err": {},
            "isRoot": false,
            "uuid": "5269729d-e2e8-443b-9c40-07dd59c782dd",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Git should be configured with username and email information",
            "fullTitle": "Git Checks Git should be configured with username and email information",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(name, 'your Git user name has not been set').not.to.be.undefined;\nexpect(email, 'your Git email has not been set').not.to.be.undefined;\nexpect(githubid, 'your Github user name has not been set').not.to.be.undefined;",
            "err": {},
            "isRoot": false,
            "uuid": "8b442409-825a-4931-9026-635136001210",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "All changes in checked-in files should be committed to Git (OK for this to fail while you are still working)",
            "fullTitle": "Git Checks All changes in checked-in files should be committed to Git (OK for this to fail while you are still working)",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(gitCheck.dirty, 'looks like you have changed some files and not committed the changes yet').to.equal(0);",
            "err": {},
            "isRoot": false,
            "uuid": "01415190-4254-44e0-8d22-4f37a091bc93",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "All files in current directory should be committed to Git (OK for this to fail while you are still working)",
            "fullTitle": "Git Checks All files in current directory should be committed to Git (OK for this to fail while you are still working)",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(gitCheck.untracked, 'looks like you have some files in the directory which have not been added to the repository. \\n      Make sure your answers do not rely on them, or tests will fail on the server.').to.equal(0);",
            "err": {},
            "isRoot": false,
            "uuid": "2aa37b8b-176f-458d-83e3-21cc4e2cc8c4",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "5269729d-e2e8-443b-9c40-07dd59c782dd",
          "8b442409-825a-4931-9026-635136001210",
          "01415190-4254-44e0-8d22-4f37a091bc93",
          "2aa37b8b-176f-458d-83e3-21cc4e2cc8c4"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 3,
        "root": false,
        "rootEmpty": false,
        "_timeout": 0
      },
      {
        "uuid": "b8d37ccc-8917-4040-bbd2-f47e99758dc1",
        "title": "JSON Checks",
        "fullFile": "/Users/joannathecoder/00-class-profile/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "JSON Checks \"before all\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "// read the JSON file",
            "err": {},
            "isRoot": false,
            "uuid": "79f67be6-3e98-41c9-bd53-22337fa7df24",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Text file with title yourGithubID.json should exist in \"students\" directory",
            "fullTitle": "JSON Checks Text file with title yourGithubID.json should exist in \"students\" directory",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let p = `students/${githubid}.json`;\nexpect(p).to.be.a.file();",
            "err": {},
            "isRoot": false,
            "uuid": "2ac67255-113c-4ff5-a2e6-2740ef09f7c3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "JSON file should be valid JSON -- please check quotation marks, colons, commas, etc.",
            "fullTitle": "JSON Checks JSON file should be valid JSON -- please check quotation marks, colons, commas, etc.",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let p = `students/${githubid}.json`;\nexpect(jlint(p), `Do your best to make sense of the error message below. If you have\ncreated a syntax error, the debugger will try to find the mistake, but\noften the error will only be detected several lines after its *actual*\nsource. Be on the lookout especially for mising quotation marks,\ncommas, braces (\"{}\"), etc. Often the *closing* parenthsis, brace, or\nquotation mark will be missing and cause an error.\n\n`).to.not.be.an('error');",
            "err": {},
            "isRoot": false,
            "uuid": "2c589152-3df5-447c-bb49-1cd4e480e62e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "JSON file should contain name, email,github, and picture",
            "fullTitle": "JSON Checks JSON file should contain name, email,github, and picture",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let j = JSON.parse(fs.readFileSync(`students/${githubid}.json`, 'utf8'));\nexpect(j.lastName, 'your JSON file does not record your last name!').to.be.a('string').that.is.not.empty;\nexpect(j.firstName, 'your JSON file does not record your first name!').to.be.a('string').that.is.not.empty;\nexpect(j.github, 'your gituhubid doesn\\'t seem to be recorded properly').to.equal(githubid);\nexpect(j.picture, 'your JSON file does not record your picture URL or path').to.be.a('string').that.is.not.empty;",
            "err": {},
            "isRoot": false,
            "uuid": "0107f593-607b-4549-9e27-197f26ffd3e6",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "2ac67255-113c-4ff5-a2e6-2740ef09f7c3",
          "2c589152-3df5-447c-bb49-1cd4e480e62e",
          "0107f593-607b-4549-9e27-197f26ffd3e6"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 5,
        "root": false,
        "rootEmpty": false,
        "_timeout": 0
      },
      {
        "uuid": "826e45b5-ca74-4540-915a-3bc93b4c9099",
        "title": "Image Checks",
        "fullFile": "/Users/joannathecoder/00-class-profile/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Image file with title yourGithubID.jpg should exist in \"images\" directory",
            "fullTitle": "Image Checks Image file with title yourGithubID.jpg should exist in \"images\" directory",
            "timedOut": false,
            "duration": 2,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "let p = `images/${githubid}.jpg`;\nexpect(p).to.be.a.file();",
            "err": {
              "message": "AssertionError: value: expected 'images/joannablenke.jpg' to exist",
              "estack": "AssertionError: value: expected 'images/joannablenke.jpg' to exist\n    at Proxy.<anonymous> (node_modules/chai-fs/lib/assertions/file.js:21:53)\n    at Proxy.methodWrapper (node_modules/chai/lib/chai/utils/addMethod.js:57:25)\n    at Context.<anonymous> (test/test.js:137:23)"
            },
            "isRoot": false,
            "uuid": "04604aa1-e514-43e0-8c0e-d469ed9b8ad4",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "04604aa1-e514-43e0-8c0e-d469ed9b8ad4"
        ],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 0
      },
      {
        "uuid": "7252b686-7bc2-4e98-8071-38a05d4cae50",
        "title": "Reflection Checks (not required unless you are attempting an \"A\" grade!)",
        "fullFile": "/Users/joannathecoder/00-class-profile/test/test.js",
        "file": "/test/test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "Reflection file should exist",
            "fullTitle": "Reflection Checks (not required unless you are attempting an \"A\" grade!) Reflection file should exist",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let r = `Reflection/${githubid}.md`;\nexpect(r, `I can't find the file ${r}`).to.be.a.file();",
            "err": {},
            "isRoot": false,
            "uuid": "63f129e9-de6f-4a1d-b684-141a35ec48f9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "The total word count for your reflection should be around 525 (give or take)",
            "fullTitle": "Reflection Checks (not required unless you are attempting an \"A\" grade!) The total word count for your reflection should be around 525 (give or take)",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let content=fs.readFileSync(`Reflection/${githubid}.md`, 'utf-8');\nexpect(hwc(content), '').to.be.approximately(525,100);",
            "err": {},
            "isRoot": false,
            "uuid": "9537dcad-655b-402b-bf26-63e3fb1a5de1",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "63f129e9-de6f-4a1d-b684-141a35ec48f9",
          "9537dcad-655b-402b-bf26-63e3fb1a5de1"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 7,
        "root": false,
        "rootEmpty": false,
        "_timeout": 0
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 0
  },
  "copyrightYear": 2019
}